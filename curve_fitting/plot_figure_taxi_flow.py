#Loads X, Y and Computes the array of displacement DR along with the displacement
#dr[idd] for each user
# import mobility_stat_lib as msl
import pickle
import binning
import sys
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
from scipy.optimize import curve_fit
from statsmodels.base.model import GenericLikelihoodModel



class MLE_fit(GenericLikelihoodModel):
     def __init__(self, endog, exog, **kwds):
         super(MLE_fit, self).__init__(endog, exog, **kwds)
     
     def nloglikeobs(self, params):
         x = self.exog
         xmin = 10.0
         Lambda1 = params[0]
         Lambda2 = params[1]
         beta2 = params[2]
         alpha1 = params[3]
         ll = np.log((alpha1 * Lambda1 * np.exp(-Lambda1 * (x - xmin)) + (1.0 - alpha1) * beta2 * Lambda2 * np.exp(-Lambda2 * (x ** beta2 - xmin ** beta2)) * x ** (beta2 - 1.))).sum()
         return -ll
     
     def fit(self, start_params=None, maxiter=10000, maxfun=5000, **kwds):
         if start_params == None:
             # Reasonable starting values
             start_params = np.append(np.zeros(self.exog.shape[1]), .5)
             start_params[0] = np.log(self.endog.mean())
         return super(MLE_fit, self).fit(start_params=start_params,
                                      maxiter=maxiter, maxfun=maxfun,
                                      **kwds)


def fitting_func(x, Lambda1, Lambda2, beta2, alpha1, alpha2):
    return np.log10(alpha1 * Lambda1 * np.exp(-Lambda1 * (x - 1.)) + alpha2 * beta2 * Lambda2 * np.exp(-Lambda2 * (x ** beta2 - 1.)) * x ** (beta2 - 1.))


def fitting_func2(x, Lambda1, Lambda2, beta2, beta3, alpha1, alpha2, alpha3):
    return np.log10(alpha1 * Lambda1 * np.exp(-Lambda1 * (x - 1.)) + alpha2 * beta2 * Lambda2 * np.exp(-Lambda2 * (x ** beta2 - 1.)) * x ** (beta2 - 1.) + alpha3 * x ** (-beta3))


def fitting_func3(xmin):
    def func3(x, Lambda1, Lambda2, beta2, alpha1, C):
        return np.log10(C * (alpha1 * Lambda1 * np.exp(-Lambda1 * (x - xmin)) + (1.0 - alpha1) * beta2 * Lambda2 * np.exp(-Lambda2 * (x ** beta2 - xmin ** beta2)) * x ** (beta2 - 1.)))
    return func3
    

def MLE_fun(x, xmin):
    def func(param):
        Lambda1 = param[0]
        Lambda2 = param[1]
        beta2 = param[2]
        alpha1 = param[3]
        return -np.log((alpha1 * Lambda1 * np.exp(-Lambda1 * (x - xmin)) + (1.0 - alpha1) * beta2 * Lambda2 * np.exp(-Lambda2 * (x ** beta2 - xmin ** beta2)) * x ** (beta2 - 1.))).sum()
    return func

def fitting_func3_nolog(xmin):
    def func3(x, Lambda1, Lambda2, beta2, alpha1, C):
        return C * (alpha1 * Lambda1 * np.exp(-Lambda1 * (x - xmin)) + (1.0 - alpha1) * beta2 * Lambda2 * np.exp(-Lambda2 * (x ** beta2 - xmin ** beta2)) * x ** (beta2 - 1.))
    return func3
    
def fitting_func3_cum(xmin):
    def func3_cum(x, Lambda1, Lambda2, beta2, alpha):
        return alpha * np.exp(-Lambda1 * (x - xmin)) + (1. - alpha) * np.exp(-Lambda2 * (x ** beta2 - xmin ** beta2))
    return func3_cum
    

def log_bin_stat(data, lower_bound = 1.0, upper_bound = None, bins = 100):
    
    if upper_bound == None:
        upper_bound = data.max() + 1e-8
    e = binning.create_log_bin2(lower_bound, upper_bound, bins)
    p = binning.data_bin_stat(data,e[0])
    return p[0], p[1]
    

# def log_bin_stat(data, lower_bound = 1.0, upper_bound = None, bins = 100):
# 	pass




    
def least_square_fit(x, y, fit_func, popt_init, fit_xmin = 1.0, fit_xmax = np.float('inf')):
    
    fit_x = x[np.logical_and(x>= fit_xmin, x<fit_xmax)]
    fit_y = y[np.logical_and(x>= fit_xmin, x<fit_xmax)]
    
    popt, pcov = curve_fit(fit_func(fit_xmin), fit_x, np.log10(fit_y), popt_init)               
    fit_yy = 10 ** fit_func(fit_xmin)(fit_x, *popt)
    
    sse = ((np.log10(fit_y) - np.log10(fit_yy)) ** 2).sum()
    sst = ((np.log10(fit_y) - np.log10(fit_y).mean()) ** 2).sum()
    r2 = 1. - sse / sst
    
    return fit_x, fit_y, fit_yy, popt, pcov, sse, r2
    
    
def filter_dr(DR, DT, param):
    
    dt_low = param[0]
    dt_high = param[1]
    v_low = param[2]
    v_high = param[3]
    dr_low = param[4]
    dr_high = param[5]
        
    DT2 = DT[np.logical_and(DT>=dt_low,DT<dt_high)]
    DR2 = DR[np.logical_and(DT>=dt_low,DT<dt_high)]
    
    V = DR2/DT2

    DT2 = DT2[np.logical_and(V>=v_low,V<v_high)]
    DR2 = DR2[np.logical_and(V>=v_low,V<v_high)]
    
    DR2 = DR2[np.logical_and(DR2>=dr_low,DR2<dr_high)]
    
    return DR2, DT2
    

if __name__ == '__main__':
    
    
    
    len_limit = 1
    
    LABEL_FONT_SIZE = 36
    TICK_FONT_SIZE = 24
    MAJOR_TICK_SIZE = 8
    MINOR_TICK_SIZE = 4
    MAJOR_TICK_WIDTH = 2
    MINOR_TICK_WIDTH = 2
    figtitle = [r'\textbf{a}',r'\textbf{b}',r'\textbf{c}',r'\textbf{d}']
    
    matplotlib.rcdefaults()
    matplotlib.rc('xtick', labelsize = TICK_FONT_SIZE)
    matplotlib.rc('ytick', labelsize = TICK_FONT_SIZE)
    matplotlib.rc('xtick.minor', size = MINOR_TICK_SIZE, width = MINOR_TICK_WIDTH)
    matplotlib.rc('ytick.minor', size = MINOR_TICK_SIZE, width = MINOR_TICK_WIDTH)
    matplotlib.rc('xtick.major', size = MAJOR_TICK_SIZE, width = MAJOR_TICK_WIDTH)
    matplotlib.rc('ytick.major', size = MAJOR_TICK_SIZE, width = MAJOR_TICK_WIDTH)
    matplotlib.rc('legend', fontsize = TICK_FONT_SIZE, frameon = False)
    matplotlib.rc('text', usetex=True)
    matplotlib.rc('axes', labelsize = LABEL_FONT_SIZE, linewidth = MAJOR_TICK_WIDTH, titlesize = LABEL_FONT_SIZE)
    matplotlib.rc('figure.subplot', hspace = 0.35, wspace = 0.25)

    # DR = pickle.load(open('displacement_all.txt', 'rb'))


#     DR = pickle.load(open('DR_all.p', 'rb'))
#     dr = pickle.load(open('DR.p', 'rb'))
#     RG = pickle.load(open('RG_all.p', 'rb'))
#     rg = pickle.load(open('RG.p', 'rb'))
#     HL = pickle.load(open('HL_all.p', 'rb'))
#     hl = pickle.load(open('HL.p', 'rb'))
#     DT = pickle.load(open('DT_all.p', 'rb'))
#     dt = pickle.load(open('DT.p', 'rb'))
    

    f, axes = plt.subplots(2, 1)
    axes = axes.reshape(2)
    
    
    
# #####################################################################################################    
    
#     param = np.array([[1.,24.*3600.*1000, 0., 240, 10., np.float('inf')]])
    
        
# #     DR2, DT2 = filter_dr(DR, DT, param[0,:])
# #     print '%d displacements after filtering' % (DR2.size)
    
    
#     fit_xmin = 10.0
#     fit_xmax = 80000.0
#     # mp0 =np.asarray([50.00000,55.29203,61.14417,67.61571,74.77220,82.68613,91.43769,101.11551,111.81763,123.65248,136.73994,151.21258,167.21701,184.91536,204.48692,226.12994,250.06367,276.53056,305.79873,338.16465,373.95621,413.53596,457.30487,505.70629,559.23056,618.41987,683.87381,756.25543,836.29797,924.81227,1022.69497,1130.93764,1250.63677,1383.00494,1529.38303,1691.25388,1870.25723,2068.20641,2287.10665,2529.17543,2796.86492,3092.88682,3420.23987,3782.24017,4182.55480,4625.23898,5114.77713,5656.12829,6254.77640,6916.78579,7648.86266,8458.42300,9353.66771,10343.66566,11438.44562,12649.09775,13987.88606,15468.37255,17105.55463,18916.01708,20918.10000,23132.08460,25580.39869,28287.84387,31281.84670,34592.73665,38254.05322,42302.88580,46780.24932,51731.49976,57206.79359,63261.59590,69957.24221,77361.55987,85549.55507,94604.17272,104617.13670,115689.87896,127934.56708,141475.24055,156449.06724,173007.73299,191318.97812,211568.29674,233960.81572,258723.37272,286106.81402,316388.53563,349875.29334,386906.31012,427856.71255,473141.33083,523218.90103,578596.71214,639835.74492,707556.35470,782444.55557,865258.96979,956838.51269,1058110.89087])
#     # mp1= np.asarray([54632.14582,38299.81836,28122.22187,24608.85674,21567.39802,18959.15261,16630.29299,13888.45332,13398.56733,12171.96166,11825.97015,10702.03531,9724.97364,9804.68812,9441.14953,8739.71515,8195.29518,7814.05320,7633.24371,6877.18087,6719.41995,6198.25929,5666.23767,5334.62710,4873.53228,4517.11538,4184.05911,3823.79163,3511.07136,3253.45539,2989.13554,2765.81778,2542.62039,2315.31227,2132.52735,1974.75072,1812.17726,1649.77433,1497.99161,1369.76242,1252.32961,1150.81562,1039.12898,931.62470,842.40191,748.96513,666.13508,587.74929,515.25402,453.95233,400.85832,349.35029,308.98650,268.68504,232.55318,194.54308,165.56990,140.89636,118.90056,102.27299,87.97487,73.70541,59.97204,50.35466,43.14006,36.47431,32.11765,29.01105,25.47296,20.55250,17.20799,14.44879,13.70106,11.81645,9.65430,8.68274,7.54917,6.34749,5.89099,5.57099,5.14250,3.76665,2.83718,2.45131,2.21221,2.69816,1.38935,0.72880,0.52983,0.47130,0.17364,0.17687,0.45867,0.10381,0.04585,0.01779,0.00363,0.00082,0.00042,0.00004])
#     # mp0 = np.array([10.0, 10.600860386853444, 11.237824094155854, 11.913060427416397, 12.628869037118983, 13.387687750635461, 14.192100874727455, 15.044847996912639, 15.948833315670257, 16.907135531261726, 17.92301833085148, 18.99994150363716, 20.141572723843982, 21.351800041712544, 22.634745125020626, 23.994777296235522, 25.43652841310335, 26.964908643353944, 28.585123187245284, 30.302690004899432, 32.123458608803823, 34.053629985479461, 36.099777714163388, 38.268870354428934, 40.56829517898958, 43.005883332512823, 45.589936502127593, 48.32925519045682, 51.233168687464492, 54.311566843192253, 57.574933749593967, 61.034383446178211, 64.701697771061419, 68.589366486340865, 72.710629814442399, 77.079523530308748, 81.710926762998781, 86.620612669495657, 91.825302153303198, 97.342720810780023, 103.19165929915322, 109.39203733180703, 115.96497151879461, 122.93284728361776, 130.31939510120074, 138.14977131670216, 146.450643820409, 155.25028287049568, 164.57865737296294, 174.46753694665682, 184.95060012097039, 196.06354903471666, 207.84423102680256, 220.33276753280467, 233.57169072642975, 247.6060883712193, 262.48375737581915, 278.2553665757772, 294.97462929625397, 312.69848628334381, 331.48729962701344, 351.40505833610246, 372.51959626551127, 394.90282313776959, 418.63096944577734, 443.78484607077951, 470.45011949975793, 498.71760357954531, 528.68356880128806, 560.45007016858813, 594.12529476594193, 629.82393021118992, 667.66755524681514, 707.78505380032448, 750.31305392387935, 795.39639310806831, 843.18861155454317, 893.85247508745124, 947.56052948454669, 1004.4956881158605, 1064.8518548912516, 1128.8345846384082, 1196.661783160346, 1268.5644493565917, 1344.7874619354845, 1425.5904133969059, 1511.2484941257285, 1602.0534296069354, 1698.3144739542865, 1800.3594631361839, 1908.5359314857103, 2023.2122952973305, 2144.7791075412301, 2273.650387968471, 2410.2650331368927, 2555.0883111598887, 2708.6134462687132, 2871.3632985848585, 3043.8921448233068, 3226.7875659911756, 3420.6724485107093, 3626.2071055818155, 3844.0915260088746, 4075.0677581506484, 4319.9224371122873, 4579.4894637863035, 4854.652844866494, 5146.3497035070595, 5455.5734708802947, 5783.3772695023472, 6130.8774998496065, 6499.2576424806775, 6889.7722886127904, 7303.751412879592, 7742.6049028220141, 8207.8273605383147, 8701.0031928462467, 9223.8120072929105, 9778.0343323894558, 10365.557681552034, 10988.382981400939, 11648.631386310773, 12348.551502419959, 13090.527045702333, 13877.084960181948, 14710.904023939254, 15594.823972218055, 16531.855168703885, 17525.188857911133, 18578.208033595551, 19694.498960206547, 20877.863386617992, 22132.331493733654, 23462.175620062997, 24871.924812012447, 26366.380248446003, 27950.63159204663, 29630.074323166151, 31410.428115197541, 33297.756314050523, 35298.486588071741, 37419.432818736721, 39667.818306666981, 42051.300372004582, 44577.99643292588, 47256.511651109817, 50095.968238312824, 53106.036523859868, 56296.967888857827, 59679.629679295322, 63265.542216932488, 67066.918034028378, 71096.703465527826, 75368.622740357983, 79897.224721996259, 84697.932457493764, 89787.095703703439, 95182.046609600875, 100901.15874433558, 106963.90967204381, 113390.94728653392, 120204.16013176044, 127426.75194757672, 135083.32069464659, 143199.94232764989, 151804.25960208816, 160925.57621713929, 170594.95661518365, 180845.3317778882, 191711.61137915833, 203230.80267691612, 215442.13654861492, 228387.20109972823, 242110.083300244, 256657.51913153444, 272079.0527549563, 288427.20524426247, 305757.65345647495, 324129.41965040081, 343605.07249857299, 364250.94017720281, 386137.33625986328, 409338.79918422922, 433934.34610742523, 460007.74201453559, 487647.78499677888, 516948.60867091781, 548010.00276985357, 580937.75299623853, 615844.00129654759, 652847.62778258917, 692074.65560116922, 733658.68013076729, 777741.32396694331, 824472.71924601193, 874012.01894963882, 926527.93893170287, 982199.33251340548, 1041215.7996035253, 1103778.3324182946])
#     # mp1 = np.array([1474290.899,1376783.308,1294588.216,1207778.152,1124474.113,1040566.066,959855.482,882184.6809,802897.0271,732193.714,659526.1556,593098.7065,528518.8911,471735.7024,414814.4521,363836.0282,316709.8019,273508.8397,236130.5516,202047.6403,172653.0628,147505.9673,125199.3552,106196.1223,90354.47587,76809.95203,65417.72623,56139.75766,48570.06548,42157.38038,36728.3849,32348.46798,28920.15967,25544.59437,23108.36714,21184.72417,19498.19231,17928.63922,16492.85756,15602.83121,15084.88668,13763.56395,13083.90148,12556.47459,11953.70407,11588.2999,11060.68095,10688.46453,10357.39178,10020.5444,9734.949818,9396.654631,9367.070348,8985.398454,8695.065017,8489.434733,8239.488967,7936.893045,7726.30924,7494.619134,7251.719539,6950.613861,6754.343369,6498.611312,6195.864054,5971.474488,5674.611845,5427.957978,5214.392296,4967.539252,4768.529606,4546.049694,4346.05861,4094.878656,3927.725923,3727.238571,3565.164348,3408.68799,3248.625356,3094.149446,2950.31176,2801.634214,2688.718099,2543.864293,2432.089378,2302.654908,2191.808176,2087.448784,2005.203799,1891.74229,1832.068903,1724.368651,1616.217355,1538.283101,1459.48913,1394.533865,1312.763096,1243.687677,1192.506617,1121.536642,1060.468357,995.4222499,937.9363322,889.0211979,831.2804703,781.6628766,723.9056361,674.6020908,635.3282081,589.4413359,545.2981221,501.0080977,468.4753134,437.1595633,404.2001775,373.296881,349.6689324,318.8142953,302.1939473,275.3420583,252.832114,234.9139512,213.6202486,188.8417843,175.1758941,155.650973,143.0229863,132.5002881,117.0947337,109.7787298,98.61543697,90.41441497,84.11737721,74.56007111,65.49475991,59.40282164,53.89347212,47.92811428,44.48086986,40.15733707,36.27013212,34.03864703,31.67214937,29.71271502,27.93114614,25.91622648,23.24399095,20.22544286,18.84935709,16.26141167,14.6023447,13.94664827,13.74862122,13.379405,11.47643286,10.03956791,9.281085384,8.767619662,8.429671713,7.529907697,6.797967574,6.118994556,6.023455352,5.737239224,5.614855712,5.40261917,5.083572884,4.497689038,3.323952753,2.930934918,2.698886162,2.441084776,2.115153331,2.269884561,2.964361465,2.377944543,1.493556294,0.949446004,0.708063555,0.607530775,0.498437475,0.607935803,0.273260848,0.165302595,0.169174845,0.182930011,0.488387609,0.362763928,0.118288278,0.086937425,0.03298746,0.025081747,0.012703412,0.004900346,0.002381947,0.000818799,0.000808315,0.000305,7.992E-05,3.01561E-05])

#     mp0 =np.asarray([1.0, 1.1167589083541716, 1.2471504593884011, 1.3927663855799943, 1.5553842683526997, 1.7369892375968128, 1.9397982048015614, 2.1662869256215735, 2.4192202222390629, 2.7016857344560319, 3.0171316115271565, 3.3694086048499297, 3.7628170753513599, 4.2021594894058216, 4.692799044118968, 5.2407251376357982, 5.85262648369042, 6.5359727629308271, 7.2991058077632296, 8.1513414338392582, 9.1030831612764569, 10.165949213844337, 11.352914346436751, 12.67846823216512, 14.158792342555762, 15.811957480085976, 17.658144374403392, 19.719890035119089, 22.022362868483899, 24.593669916387523, 27.465199968247759, 30.672006734269395, 34.253236757594493, 38.252607289008203, 42.718939957773628, 47.706756753290684, 53.2769455929229, 59.497503600797174, 66.444367171024638, 74.202338948197237, 82.866123041114975, 92.541481106938022, 103.3465234184623, 115.41315067500078, 128.8886641575294, 143.93756388378998, 160.74355671402012, 179.51179892091596, 200.47140059961569, 223.87822248985862, 250.01799935204687, 279.20982802528584, 311.81006274727417, 348.21666528749165, 388.87406299718913, 434.27857407999227, 484.98446631117844, 541.61072316640207, 604.84859995622469, 675.47006220666242, 754.33720929583671, 842.41279838415085, 940.77199710706714, 1050.6155084994623, 1173.2842283718223, 1310.2756140656827, 1463.2619644070837, 1634.1108340074354, 1824.9078311158685, 2037.9820773239362, 2275.9346399176461, 2541.6702839598747, 2838.432931711267, 3169.8452622544055, 3539.9529347268726, 3953.273975010728, 4414.853928757937, 4930.3274540228394, 5505.9871053831484, 6148.8601492198304, 6866.794347865206, 7668.5537598145429, 8563.9257254657678, 9563.8403443973566, 10680.503902682776, 11927.547879032487, 13320.195348730434, 14875.446816712514, 16612.287748312403, 18551.920331070738, 20718.022296800118, 23137.035963431888, 25838.491025073403, 28855.365030680034, 32224.485951823372, 35986.981753832602, 40188.782458371592, 44881.180826294338, 50121.458505218638, 55973.58528540688])
#     mp1= np.asarray([539.5733900569,582.8598509427,583.7273588341,836.3163858805,638.7490413,719.8892732026,838.8938721191,929.0987115682,977.1104367177,960.5451268323,1007.7297317987,943.0401931284,874.0335276448,898.8268388957,881.5057463314,840.0046891777,952.6648783742,912.0296974597,849.5303151472,855.2740481306,709.4026553754,757.3937728369,697.0670977229,637.6981860755,581.9140376001,476.1164769968,374.925003956,323.9994796854,241.5114136238,201.2864185856,140.0146727759,132.3567592455,91.7644407082,76.3489926276,57.3397162977,47.7542158189,45.97658275,42.1773073615,37.7676032365,35.4348627237,37.7247020231,33.0401297568,36.8785734853,30.7223914352,33.8895207807,33.9759754611,30.849985503,29.7238473111,28.4959659679,27.620740751,26.2744759359,25.3985901347,25.3250766528,23.1938110435,21.6938796721,22.3642647846,21.474137044,21.8065512317,21.1975220039,19.3616741109,19.1540018916,19.4287877983,17.7525278943,17.8448100076,16.9937692666,16.5178134805,16.2482784141,16.4992114536,16.2056187524,16.1754929556,16.0911796963,16.4137907412,16.0585455323,15.6197788643,14.2746180934,13.6639382815,12.4700875699,11.7673698061,11.2215002156,10.3964959659,9.7261097079,8.4233148784,7.3896309346,6.5283763815,5.7648327856,5.19801325,4.3157007971,3.8771541351,3.2774248363,2.6868541242,2.0549697873,1.5724859023,1.0424697863,0.5758178603,0.3027245903,0.1261363966,0.0515727739,0.0175563216,0.0032466829,0.0010710873])



#     mp1 = mp1/sum(mp1)

#     # print len(mp0)
#     # print len(mp1)
# #     p = log_bin_stat(DR2, lower_bound = fit_xmin)
#     p = np.asarray([mp0,mp1])
#     pp = least_square_fit(p[0], p[1], fitting_func3,  [0.07622411,  0.00713653,  0.57590423,  0.5,  1.0], fit_xmin = fit_xmin, fit_xmax = fit_xmax)
#     # pp = least_square_fit(p[0], p[1], fitting_func3,  None, fit_xmin = fit_xmin, fit_xmax = fit_xmax) 


#     label2 = '$y = y_1 + y_2$'
#     axes[0].loglog(p[0],p[1],'o', markerfacecolor = 'None', markeredgecolor = 'blue', ms = 9, label = 'displacements')
#     # axes[0].loglog(pp[0],pp[2],'-', color = 'red', lw = 2.0, label = label2)
#     axes[0].axvspan(10., 7e4, facecolor='green', alpha=0.3)
#     axes[0].loglog([70., 70.], [1e-9, 1.], '-', color = 'grey', alpha = 0.5)
    
#     xx = np.logspace(1, 7, 50)
#     yy = 10 ** (fitting_func3(10.)(xx, *pp[-4]))
#     yy1 = pp[-4][-1] * pp[-4][-2] * pp[-4][0] * np.exp(-pp[-4][0] * (xx - 10.))
#     yy2 = yy - yy1
#     label3 = '$y_1 \sim e^{-%.2g x}$' % pp[-4][0]
#     label4 = '$y_2 \sim x^{%.2g} e^{-%.2g x^{%.2g}}$' % (pp[-4][2] - 1., pp[-4][1], pp[-4][2])
#     axes[0].loglog(xx[yy1>p[1].min()], yy1[yy1>p[1].min()], '-.', color = 'black', lw = 2.0, label = label3)
#     axes[0].loglog(xx[yy2>p[1].min()], yy2[yy2>p[1].min()], '--', color = 'black', lw = 2.0, label = label4)
    
#     axes[0].set_xlim([fit_xmin, 1e7])
#     axes[0].set_ylim([1e-9, 1.])

#     fit_xmin = 100000.0
#     fit_xmax = 250000.0

#     xx = np.log10(p[0][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
#     yy = np.log10(p[1][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
#     # pfit = binning.double_linear_regression(xx, yy)
#     pfit = binning.double_linear_regression(xx, yy)
    

#     xx = np.linspace(5.0, 6.0, 50) 
#     # yy2 = xx * pfit[2] + pfit[3] 

#     # label5 = '$y_3 \sim x^{%.2f}$' % pfit[0]
#     # axes[base].loglog(xx, yy2, '--', color = 'red', lw = 2.0, label = label5)

#     # axes[0].loglog(10 ** xx, 10 ** yy2, '--', color = 'red',lw = 2.0, label = '$y_3 \sim x^{%.2f}$' % (pfit[2]))






#     # xx = p[0][p[0]>=fit_xmax]
#     # yy = p[1][p[0]>=fit_xmax]
#     # pfit = np.polyfit(np.log10(xx), np.log10(yy), 1)
#     # yy2 = 10 ** np.polyval(pfit, np.log10(xx))
#     # label5 = '$y_2 \sim x^{%.2f}$' % pfit[0]
#     # axes[0].loglog(xx, yy2, '--', color = 'red', lw = 2.0, label = label5)
    
#     # axes[0].set_xlim([fit_xmin, 1e7])
#     # axes[0].set_ylim([1e-9, 1.])
#     axes[0].legend()
#     axes[0].set_xlabel('$d (meter)$')
#     axes[0].set_ylabel('$P(d)$')
#     axes[0].set_title(figtitle[0], horizontalalignment='center', verticalalignment='bottom', x = -0.15, y = 1.05)

    
    
#     fit_xmin = 100.0
#     fit_xmax = 5e4
#     xx = np.log10(p[0][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
#     yy = np.log10(p[1][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
#     pfit = binning.double_linear_regression(xx, yy)
#     axes[1].loglog(p[0],p[1],'o', markerfacecolor = 'None', markeredgecolor = 'blue', ms = 9, label = 'displacements')
    
#     xx = np.linspace(1.5, 4.5, 50) 
#     yy2 = xx * pfit[0] + pfit[1] 
#     axes[1].loglog(10 ** xx, 10 ** yy2, '--r', lw = 2.0, label = '$y_1 \sim x^{%.2f}$' % (pfit[0]))
#     xx = np.linspace(2.8, 5.5, 50) 
#     yy2 = xx * pfit[2] + pfit[3] 
#     # axes[1].loglog(10 ** xx, 10 ** yy2, '--b', lw = 2.0, label = '$y_2 \sim x^{%.2f}$' % (pfit[2]))
#     axes[1].loglog(10 ** xx, 10 ** yy2, '--', color = 'black', lw = 2.0, label = '$y_2 \sim x^{%.2f}$' % (pfit[2]))
    
#     axes[1].loglog([4e3, 4e3], [1e-9, 1.], '-', color = 'red', alpha = 0.5)
  
#     axes[1].set_xlim([10., 1e7])
#     axes[1].set_ylim([1e-9, 1.])
#     axes[1].legend()        
#     axes[1].set_xlabel('$d (meter)$')
#     axes[1].set_ylabel('$P(d)$')
#     axes[1].set_title(figtitle[1], horizontalalignment='center', verticalalignment='bottom', x = -0.15, y = 1.05)
        
# #####################################################################################################################    


    
    base = 0
    
        
    # RG2 = RG[RG>=10.0]
    # print '%d displacements after filtering' % (RG2.size)

    np0 =np.asarray([1.0, 1.1167589083541716, 1.2471504593884011, 1.3927663855799943, 1.5553842683526997, 1.7369892375968128, 1.9397982048015614, 2.1662869256215735, 2.4192202222390629, 2.7016857344560319, 3.0171316115271565, 3.3694086048499297, 3.7628170753513599, 4.2021594894058216, 4.692799044118968, 5.2407251376357982, 5.85262648369042, 6.5359727629308271, 7.2991058077632296, 8.1513414338392582, 9.1030831612764569, 10.165949213844337, 11.352914346436751, 12.67846823216512, 14.158792342555762, 15.811957480085976, 17.658144374403392, 19.719890035119089, 22.022362868483899, 24.593669916387523, 27.465199968247759, 30.672006734269395, 34.253236757594493, 38.252607289008203, 42.718939957773628, 47.706756753290684, 53.2769455929229, 59.497503600797174, 66.444367171024638, 74.202338948197237, 82.866123041114975, 92.541481106938022, 103.3465234184623, 115.41315067500078, 128.8886641575294, 143.93756388378998, 160.74355671402012, 179.51179892091596, 200.47140059961569, 223.87822248985862, 250.01799935204687, 279.20982802528584, 311.81006274727417, 348.21666528749165, 388.87406299718913, 434.27857407999227, 484.98446631117844, 541.61072316640207, 604.84859995622469, 675.47006220666242, 754.33720929583671, 842.41279838415085, 940.77199710706714, 1050.6155084994623, 1173.2842283718223, 1310.2756140656827, 1463.2619644070837, 1634.1108340074354, 1824.9078311158685, 2037.9820773239362, 2275.9346399176461, 2541.6702839598747, 2838.432931711267, 3169.8452622544055, 3539.9529347268726, 3953.273975010728, 4414.853928757937, 4930.3274540228394, 5505.9871053831484, 6148.8601492198304, 6866.794347865206, 7668.5537598145429, 8563.9257254657678, 9563.8403443973566, 10680.503902682776, 11927.547879032487, 13320.195348730434, 14875.446816712514, 16612.287748312403, 18551.920331070738, 20718.022296800118, 23137.035963431888, 25838.491025073403, 28855.365030680034, 32224.485951823372, 35986.981753832602, 40188.782458371592, 44881.180826294338, 50121.458505218638, 55973.58528540688])
    np1= np.asarray([539.5733900569,582.8598509427,583.7273588341,836.3163858805,638.7490413,719.8892732026,838.8938721191,929.0987115682,977.1104367177,960.5451268323,1007.7297317987,943.0401931284,874.0335276448,898.8268388957,881.5057463314,840.0046891777,952.6648783742,912.0296974597,849.5303151472,855.2740481306,709.4026553754,757.3937728369,697.0670977229,637.6981860755,581.9140376001,476.1164769968,374.925003956,323.9994796854,241.5114136238,201.2864185856,140.0146727759,132.3567592455,91.7644407082,76.3489926276,57.3397162977,47.7542158189,45.97658275,42.1773073615,37.7676032365,35.4348627237,37.7247020231,33.0401297568,36.8785734853,30.7223914352,33.8895207807,33.9759754611,30.849985503,29.7238473111,28.4959659679,27.620740751,26.2744759359,25.3985901347,25.3250766528,23.1938110435,21.6938796721,22.3642647846,21.474137044,21.8065512317,21.1975220039,19.3616741109,19.1540018916,19.4287877983,17.7525278943,17.8448100076,16.9937692666,16.5178134805,16.2482784141,16.4992114536,16.2056187524,16.1754929556,16.0911796963,16.4137907412,16.0585455323,15.6197788643,14.2746180934,13.6639382815,12.4700875699,11.7673698061,11.2215002156,10.3964959659,9.7261097079,8.4233148784,7.3896309346,6.5283763815,5.7648327856,5.19801325,4.3157007971,3.8771541351,3.2774248363,2.6868541242,2.0549697873,1.5724859023,1.0424697863,0.5758178603,0.3027245903,0.1261363966,0.0515727739,0.0175563216,0.0032466829,0.0010710873])

    np1 = np1/sum(np1)    
    
    fit_xmin = 10.0
    fit_xmax = 80000.0
    # fit_xmax = 5.0099e+05

    p = np.asarray([np0,np1])
    pp = least_square_fit(p[0], p[1], fitting_func3,  [0.07622411,  0.00713653,  0.57590423,  0.5,  1.0], fit_xmin = fit_xmin, fit_xmax = fit_xmax)    
    # p = log_bin_stat(RG2, lower_bound = fit_xmin)
    
    # pp = least_square_fit(p[0], p[1], fitting_func3,  [0.07622411,  0.00713653,  0.57590423,  0.5,  1.0], fit_xmin = fit_xmin, fit_xmax = fit_xmax) 
    
    label2 = '$y = y_1 + y_2$'
    axes[base].loglog(p[0],p[1],'o', markerfacecolor = 'None', markeredgecolor = 'blue', ms = 9, label = 'radius')
    axes[base].loglog(pp[0],pp[2],'-', color = 'red', lw = 2.0, label = label2)
    # plt.axvspan(10., 5e4, facecolor='green', alpha=0.3)
    plt.loglog([6.0e3, 6.0e3], [1e-9, 1.], '-', color = 'grey', alpha = 0.5)
    
    xx = np.logspace(1, 7, 50)
    yy = 10 ** (fitting_func3(10.)(xx, *pp[-4]))
    yy1 = pp[-4][-1] * pp[-4][-2] * pp[-4][0] * np.exp(-pp[-4][0] * (xx - 10.))
    yy2 = yy - yy1
    label3 = '$y_1 \sim e^{-%.2g x}$' % pp[-4][0]
    label4 = '$y_2 \sim x^{%.2g} e^{-%.2g x^{%.2g}}$' % (pp[-4][2] - 1., pp[-4][1], pp[-4][2])
    axes[base].loglog(xx[yy1>p[1].min()], yy1[yy1>p[1].min()], '-.', color = 'black', lw = 2.0, label = label3)
    axes[base].loglog(xx[yy2>p[1].min()], yy2[yy2>p[1].min()], '--', color = 'black', lw = 2.0, label = label4)
    # axes[base].axvspan(10., 1e4, facecolor='green', alpha=0.3)
    axes[base].loglog([50., 50.], [1e-9, 1.], '-', color = 'grey', alpha = 0.5)
  

    # xx = p[0][p[0]>=1e5]
    # yy = p[1][p[0]>=1e5]
    # pfit = np.polyfit(np.log10(xx), np.log10(yy), 1)
    # yy2 = 10 ** np.polyval(pfit, np.log10(xx))
    # label5 = '$y_3 \sim x^{%.2f}$' % pfit[0]
    # axes[base].loglog(xx, yy2, '--', color = 'red', lw = 2.0, label = label5)
    
    axes[base].set_xlim([fit_xmin, 1e5])
    axes[base].set_ylim([1e-7, 1.])
    # axes[base].legend()                    
    # axes[base].set_xlabel('$r_g$')
    # axes[base].set_ylabel('$P(r_g)$')
    # axes[base].set_title(figtitle[base], horizontalalignment='center', verticalalignment='bottom', x = -0.15, y = 1.05)


    fit_xmin = 1e4
    fit_xmax = 2e4
    xx = np.log10(p[0][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
    yy = np.log10(p[1][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
    pfit = binning.double_linear_regression(xx, yy)
    

    xx = np.linspace(4.0, 6.0, 50) 
    yy2 = xx * pfit[2] + pfit[3] 

    # label5 = '$y_3 \sim x^{%.2f}$' % pfit[0]
    # axes[base].loglog(xx, yy2, '--', color = 'red', lw = 2.0, label = label5)

    # axes[base].loglog(10 ** xx, 10 ** yy2, '--', color = 'red',lw = 2.0, label = '$y_3 \sim x^{%.2f}$' % (pfit[2]))
   
    axes[base].legend()                    
    axes[base].set_xlabel('$r_g (meter)$')
    axes[base].set_ylabel('$P(r_g)$')
    axes[base].set_title(figtitle[base], horizontalalignment='center', verticalalignment='bottom', x = -0.15, y = 1.05)

    
    
    fit_xmin = 100.0
    fit_xmax = 2e4
    xx = np.log10(p[0][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
    yy = np.log10(p[1][np.logical_and(p[0]<fit_xmax,p[0]>=fit_xmin)])
    pfit = binning.double_linear_regression(xx, yy)
    axes[base+1].loglog(p[0],p[1],'o', markerfacecolor = 'None', markeredgecolor = 'blue', ms = 9, label = 'radius')
    
    xx = np.linspace(1.5, 4.5, 50) 
    yy2 = xx * pfit[0] + pfit[1]
    # '--', color = 'black',
    axes[base+1].loglog(10 ** xx, 10 ** yy2, '--r', lw = 2.0, label = '$y_1 \sim x^{%.2f}$' % (pfit[0]))

    xx = np.linspace(2.8, 5.5, 50) 
    yy2 = xx * pfit[2] + pfit[3]

    # axes[base+1].loglog(10 ** xx, 10 ** yy2, '--b', lw = 2.0, label = '$y_2 \sim x^{%.2f}$' % (pfit[2]))
    axes[base+1].loglog(10 ** xx, 10 ** yy2, '--', color = 'black',lw = 2.0, label = '$y_2 \sim x^{%.2f}$' % (pfit[2]))
    

    axes[base+1].set_xlim([10., 1e6])
    axes[base+1].set_ylim([1e-7, 1.])
    axes[base+1].legend()                    
    axes[base+1].set_xlabel('$r_g (meter)$')
    axes[base+1].set_ylabel('$P(r_g)$')
    axes[base+1].set_title(figtitle[base+1], horizontalalignment='center', verticalalignment='bottom', x = -0.15, y = 1.05)

                        

    f.set_size_inches(24,24)
    f.savefig('figure1.TIFF', bbox_inches='tight', dpi=300)
    plt.show()  

            
